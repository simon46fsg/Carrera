
carrera_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b4  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001990  08001990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001994  08001994  00011994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  080019a8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  080019a8  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000070ea  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000112b  00000000  00000000  0002716b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000005f0  00000000  00000000  00028298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000454  00000000  00000000  00028888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032f2f  00000000  00000000  00028cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000071ac  00000000  00000000  0005bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00138eec  00000000  00000000  00062db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001638  00000000  00000000  0019bca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  0019d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08001968 	.word	0x08001968

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08001968 	.word	0x08001968

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 f9ba 	bl	8000688 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000314:	f000 f8a0 	bl	8000458 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f808 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031c:	f000 f864 	bl	80003e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  mainInit();
 8000320:	f001 fae8 	bl	80018f4 <mainInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainProcces();
 8000324:	f001 faed 	bl	8001902 <mainProcces>
 8000328:	e7fc      	b.n	8000324 <main+0x18>
	...

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09c      	sub	sp, #112	; 0x70
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000336:	224c      	movs	r2, #76	; 0x4c
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fae8 	bl	8001910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2220      	movs	r2, #32
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fae2 	bl	8001910 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800034c:	2002      	movs	r0, #2
 800034e:	f000 fb8d 	bl	8000a6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000352:	2300      	movs	r3, #0
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemClock_Config+0xb8>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800035e:	4a21      	ldr	r2, [pc, #132]	; (80003e4 <SystemClock_Config+0xb8>)
 8000360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemClock_Config+0xb8>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000372:	bf00      	nop
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <SystemClock_Config+0xb8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800037c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000380:	d1f8      	bne.n	8000374 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000382:	2302      	movs	r3, #2
 8000384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000386:	2301      	movs	r3, #1
 8000388:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800038a:	2340      	movs	r3, #64	; 0x40
 800038c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038e:	2300      	movs	r3, #0
 8000390:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fba2 	bl	8000ae0 <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003a2:	f000 f885 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	233f      	movs	r3, #63	; 0x3f
 80003a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2101      	movs	r1, #1
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 ff62 	bl	8001294 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003d6:	f000 f86b 	bl	80004b0 <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3770      	adds	r7, #112	; 0x70
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	58024800 	.word	0x58024800

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_GPIO_Init+0x6c>)
 80003f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003f4:	4a17      	ldr	r2, [pc, #92]	; (8000454 <MX_GPIO_Init+0x6c>)
 80003f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_GPIO_Init+0x6c>)
 8000400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_GPIO_Init+0x6c>)
 800040e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000412:	4a10      	ldr	r2, [pc, #64]	; (8000454 <MX_GPIO_Init+0x6c>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <MX_GPIO_Init+0x6c>)
 800041e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <MX_GPIO_Init+0x6c>)
 800042c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000430:	4a08      	ldr	r2, [pc, #32]	; (8000454 <MX_GPIO_Init+0x6c>)
 8000432:	f043 0302 	orr.w	r3, r3, #2
 8000436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_GPIO_Init+0x6c>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000440:	f003 0302 	and.w	r3, r3, #2
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000448:	bf00      	nop
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	58024400 	.word	0x58024400

08000458 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800045e:	463b      	mov	r3, r7
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800046a:	f000 fa83 	bl	8000974 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800046e:	2301      	movs	r3, #1
 8000470:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000472:	2300      	movs	r3, #0
 8000474:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800047a:	231f      	movs	r3, #31
 800047c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800047e:	2387      	movs	r3, #135	; 0x87
 8000480:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000482:	2300      	movs	r3, #0
 8000484:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000486:	2300      	movs	r3, #0
 8000488:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800048a:	2301      	movs	r3, #1
 800048c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800048e:	2301      	movs	r3, #1
 8000490:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000496:	2300      	movs	r3, #0
 8000498:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800049a:	463b      	mov	r3, r7
 800049c:	4618      	mov	r0, r3
 800049e:	f000 faa1 	bl	80009e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80004a2:	2004      	movs	r0, #4
 80004a4:	f000 fa7e 	bl	80009a4 <HAL_MPU_Enable>

}
 80004a8:	bf00      	nop
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_MspInit+0x30>)
 80004c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x30>)
 80004ca:	f043 0302 	orr.w	r3, r3, #2
 80004ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x30>)
 80004d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004d8:	f003 0302 	and.w	r3, r3, #2
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	58024400 	.word	0x58024400

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053c:	f000 f916 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000548:	4b32      	ldr	r3, [pc, #200]	; (8000614 <SystemInit+0xd0>)
 800054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054e:	4a31      	ldr	r2, [pc, #196]	; (8000614 <SystemInit+0xd0>)
 8000550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000558:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <SystemInit+0xd4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 030f 	and.w	r3, r3, #15
 8000560:	2b06      	cmp	r3, #6
 8000562:	d807      	bhi.n	8000574 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000564:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <SystemInit+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f023 030f 	bic.w	r3, r3, #15
 800056c:	4a2a      	ldr	r2, [pc, #168]	; (8000618 <SystemInit+0xd4>)
 800056e:	f043 0307 	orr.w	r3, r3, #7
 8000572:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemInit+0xd8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a28      	ldr	r2, [pc, #160]	; (800061c <SystemInit+0xd8>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <SystemInit+0xd8>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemInit+0xd8>)
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	4924      	ldr	r1, [pc, #144]	; (800061c <SystemInit+0xd8>)
 800058c:	4b24      	ldr	r3, [pc, #144]	; (8000620 <SystemInit+0xdc>)
 800058e:	4013      	ands	r3, r2
 8000590:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <SystemInit+0xd4>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f003 0308 	and.w	r3, r3, #8
 800059a:	2b00      	cmp	r3, #0
 800059c:	d007      	beq.n	80005ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800059e:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <SystemInit+0xd4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f023 030f 	bic.w	r3, r3, #15
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <SystemInit+0xd4>)
 80005a8:	f043 0307 	orr.w	r3, r3, #7
 80005ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80005ae:	4b1b      	ldr	r3, [pc, #108]	; (800061c <SystemInit+0xd8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <SystemInit+0xd8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <SystemInit+0xd8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <SystemInit+0xd8>)
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <SystemInit+0xe0>)
 80005c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <SystemInit+0xd8>)
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <SystemInit+0xe4>)
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <SystemInit+0xd8>)
 80005ce:	4a17      	ldr	r2, [pc, #92]	; (800062c <SystemInit+0xe8>)
 80005d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <SystemInit+0xd8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <SystemInit+0xd8>)
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <SystemInit+0xe8>)
 80005dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <SystemInit+0xd8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <SystemInit+0xd8>)
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <SystemInit+0xe8>)
 80005e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <SystemInit+0xd8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005f0:	4b0a      	ldr	r3, [pc, #40]	; (800061c <SystemInit+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <SystemInit+0xd8>)
 80005f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <SystemInit+0xd8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <SystemInit+0xec>)
 8000604:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000608:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00
 8000618:	52002000 	.word	0x52002000
 800061c:	58024400 	.word	0x58024400
 8000620:	eaf6ed7f 	.word	0xeaf6ed7f
 8000624:	02020200 	.word	0x02020200
 8000628:	01ff0000 	.word	0x01ff0000
 800062c:	01010280 	.word	0x01010280
 8000630:	52004000 	.word	0x52004000

08000634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800066c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000638:	f7ff ff84 	bl	8000544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	; (8000674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	; (8000680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000662:	f001 f95d 	bl	8001920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000666:	f7ff fe51 	bl	800030c <main>
  bx  lr
 800066a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800066c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000670:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000674:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000678:	08001998 	.word	0x08001998
  ldr r2, =_sbss
 800067c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000680:	24000030 	.word	0x24000030

08000684 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC3_IRQHandler>
	...

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800068e:	2003      	movs	r0, #3
 8000690:	f000 f93e 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000694:	f000 ffb4 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 8000698:	4602      	mov	r2, r0
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_Init+0x68>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	4913      	ldr	r1, [pc, #76]	; (80006f4 <HAL_Init+0x6c>)
 80006a6:	5ccb      	ldrb	r3, [r1, r3]
 80006a8:	f003 031f 	and.w	r3, r3, #31
 80006ac:	fa22 f303 	lsr.w	r3, r2, r3
 80006b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_Init+0x68>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <HAL_Init+0x6c>)
 80006bc:	5cd3      	ldrb	r3, [r2, r3]
 80006be:	f003 031f 	and.w	r3, r3, #31
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	fa22 f303 	lsr.w	r3, r2, r3
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <HAL_Init+0x70>)
 80006ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <HAL_Init+0x74>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d2:	200f      	movs	r0, #15
 80006d4:	f000 f814 	bl	8000700 <HAL_InitTick>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e002      	b.n	80006e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006e2:	f7ff feeb 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58024400 	.word	0x58024400
 80006f4:	08001980 	.word	0x08001980
 80006f8:	24000004 	.word	0x24000004
 80006fc:	24000000 	.word	0x24000000

08000700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_InitTick+0x60>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	e021      	b.n	8000758 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_InitTick+0x64>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_InitTick+0x60>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f915 	bl	800095a <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f8ed 	bl	8000926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x68>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2400000c 	.word	0x2400000c
 8000764:	24000000 	.word	0x24000000
 8000768:	24000008 	.word	0x24000008

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	2400000c 	.word	0x2400000c
 8000790:	2400002c 	.word	0x2400002c

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2400002c 	.word	0x2400002c

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <__NVIC_SetPriorityGrouping+0x40>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d6:	4313      	orrs	r3, r2
 80007d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <__NVIC_SetPriorityGrouping+0x40>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	60d3      	str	r3, [r2, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	05fa0000 	.word	0x05fa0000

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f7ff ff8e 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff47 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff5e 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff90 	bl	8000864 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffb2 	bl	80008cc <SysTick_Config>
 8000968:	4603      	mov	r3, r0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000978:	f3bf 8f5f 	dmb	sy
}
 800097c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <HAL_MPU_Disable+0x28>)
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <HAL_MPU_Disable+0x28>)
 8000984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000988:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_MPU_Disable+0x2c>)
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00
 80009a0:	e000ed90 	.word	0xe000ed90

080009a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <HAL_MPU_Enable+0x38>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_MPU_Enable+0x3c>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <HAL_MPU_Enable+0x3c>)
 80009bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80009c2:	f3bf 8f4f 	dsb	sy
}
 80009c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009c8:	f3bf 8f6f 	isb	sy
}
 80009cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed90 	.word	0xe000ed90
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	785a      	ldrb	r2, [r3, #1]
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <HAL_MPU_ConfigRegion+0x84>)
 80009f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d029      	beq.n	8000a50 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80009fc:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <HAL_MPU_ConfigRegion+0x84>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7b1b      	ldrb	r3, [r3, #12]
 8000a08:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7adb      	ldrb	r3, [r3, #11]
 8000a0e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	7a9b      	ldrb	r3, [r3, #10]
 8000a16:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000a18:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7b5b      	ldrb	r3, [r3, #13]
 8000a1e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000a20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7b9b      	ldrb	r3, [r3, #14]
 8000a26:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	7bdb      	ldrb	r3, [r3, #15]
 8000a2e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7a5b      	ldrb	r3, [r3, #9]
 8000a36:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7a1b      	ldrb	r3, [r3, #8]
 8000a3e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000a40:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000a4a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000a4c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000a4e:	e005      	b.n	8000a5c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_MPU_ConfigRegion+0x84>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <HAL_MPU_ConfigRegion+0x84>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed90 	.word	0xe000ed90

08000a6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_PWREx_ConfigSupply+0x70>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	f003 0304 	and.w	r3, r3, #4
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d00a      	beq.n	8000a96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_PWREx_ConfigSupply+0x70>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d001      	beq.n	8000a92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e01f      	b.n	8000ad2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	e01d      	b.n	8000ad2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_PWREx_ConfigSupply+0x70>)
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	f023 0207 	bic.w	r2, r3, #7
 8000a9e:	490f      	ldr	r1, [pc, #60]	; (8000adc <HAL_PWREx_ConfigSupply+0x70>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000aa6:	f7ff fe75 	bl	8000794 <HAL_GetTick>
 8000aaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000aac:	e009      	b.n	8000ac2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000aae:	f7ff fe71 	bl	8000794 <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000abc:	d901      	bls.n	8000ac2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e007      	b.n	8000ad2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_PWREx_ConfigSupply+0x70>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ace:	d1ee      	bne.n	8000aae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	58024800 	.word	0x58024800

08000ae0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e3c8      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 8087 	beq.w	8000c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b00:	4b88      	ldr	r3, [pc, #544]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b0a:	4b86      	ldr	r3, [pc, #536]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b12:	2b10      	cmp	r3, #16
 8000b14:	d007      	beq.n	8000b26 <HAL_RCC_OscConfig+0x46>
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	2b18      	cmp	r3, #24
 8000b1a:	d110      	bne.n	8000b3e <HAL_RCC_OscConfig+0x5e>
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d10b      	bne.n	8000b3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b26:	4b7f      	ldr	r3, [pc, #508]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d06c      	beq.n	8000c0c <HAL_RCC_OscConfig+0x12c>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d168      	bne.n	8000c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e3a2      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b46:	d106      	bne.n	8000b56 <HAL_RCC_OscConfig+0x76>
 8000b48:	4b76      	ldr	r3, [pc, #472]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a75      	ldr	r2, [pc, #468]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e02e      	b.n	8000bb4 <HAL_RCC_OscConfig+0xd4>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10c      	bne.n	8000b78 <HAL_RCC_OscConfig+0x98>
 8000b5e:	4b71      	ldr	r3, [pc, #452]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a70      	ldr	r2, [pc, #448]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b6e      	ldr	r3, [pc, #440]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a6d      	ldr	r2, [pc, #436]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e01d      	b.n	8000bb4 <HAL_RCC_OscConfig+0xd4>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0xbc>
 8000b82:	4b68      	ldr	r3, [pc, #416]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a67      	ldr	r2, [pc, #412]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b65      	ldr	r3, [pc, #404]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a64      	ldr	r2, [pc, #400]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e00b      	b.n	8000bb4 <HAL_RCC_OscConfig+0xd4>
 8000b9c:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a60      	ldr	r2, [pc, #384]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b5e      	ldr	r3, [pc, #376]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a5d      	ldr	r2, [pc, #372]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d013      	beq.n	8000be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fdea 	bl	8000794 <HAL_GetTick>
 8000bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bc2:	e008      	b.n	8000bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc4:	f7ff fde6 	bl	8000794 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b64      	cmp	r3, #100	; 0x64
 8000bd0:	d901      	bls.n	8000bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e356      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bd6:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f0      	beq.n	8000bc4 <HAL_RCC_OscConfig+0xe4>
 8000be2:	e014      	b.n	8000c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000be4:	f7ff fdd6 	bl	8000794 <HAL_GetTick>
 8000be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bec:	f7ff fdd2 	bl	8000794 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b64      	cmp	r3, #100	; 0x64
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e342      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bfe:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f0      	bne.n	8000bec <HAL_RCC_OscConfig+0x10c>
 8000c0a:	e000      	b.n	8000c0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 808c 	beq.w	8000d34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000c24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d007      	beq.n	8000c42 <HAL_RCC_OscConfig+0x162>
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	2b18      	cmp	r3, #24
 8000c36:	d137      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x1c8>
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d132      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c42:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <HAL_RCC_OscConfig+0x17a>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e314      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c5a:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 0219 	bic.w	r2, r3, #25
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	492f      	ldr	r1, [pc, #188]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fd92 	bl	8000794 <HAL_GetTick>
 8000c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c74:	f7ff fd8e 	bl	8000794 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e2fe      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	061b      	lsls	r3, r3, #24
 8000ca0:	4920      	ldr	r1, [pc, #128]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ca6:	e045      	b.n	8000d34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d026      	beq.n	8000cfe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f023 0219 	bic.w	r2, r3, #25
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	4919      	ldr	r1, [pc, #100]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc2:	f7ff fd67 	bl	8000794 <HAL_GetTick>
 8000cc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cc8:	e008      	b.n	8000cdc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cca:	f7ff fd63 	bl	8000794 <HAL_GetTick>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d901      	bls.n	8000cdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e2d3      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f0      	beq.n	8000cca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	061b      	lsls	r3, r3, #24
 8000cf6:	490b      	ldr	r1, [pc, #44]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	604b      	str	r3, [r1, #4]
 8000cfc:	e01a      	b.n	8000d34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_RCC_OscConfig+0x244>)
 8000d04:	f023 0301 	bic.w	r3, r3, #1
 8000d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fd43 	bl	8000794 <HAL_GetTick>
 8000d0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d10:	e00a      	b.n	8000d28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d12:	f7ff fd3f 	bl	8000794 <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d903      	bls.n	8000d28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e2af      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
 8000d24:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d28:	4b96      	ldr	r3, [pc, #600]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1ee      	bne.n	8000d12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d06a      	beq.n	8000e16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d40:	4b90      	ldr	r3, [pc, #576]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d4a:	4b8e      	ldr	r3, [pc, #568]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d007      	beq.n	8000d66 <HAL_RCC_OscConfig+0x286>
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2b18      	cmp	r3, #24
 8000d5a:	d11b      	bne.n	8000d94 <HAL_RCC_OscConfig+0x2b4>
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d116      	bne.n	8000d94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d66:	4b87      	ldr	r3, [pc, #540]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d005      	beq.n	8000d7e <HAL_RCC_OscConfig+0x29e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	2b80      	cmp	r3, #128	; 0x80
 8000d78:	d001      	beq.n	8000d7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e282      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d7e:	4b81      	ldr	r3, [pc, #516]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	061b      	lsls	r3, r3, #24
 8000d8c:	497d      	ldr	r1, [pc, #500]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d92:	e040      	b.n	8000e16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d023      	beq.n	8000de4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000d9c:	4b79      	ldr	r3, [pc, #484]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a78      	ldr	r2, [pc, #480]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da8:	f7ff fcf4 	bl	8000794 <HAL_GetTick>
 8000dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000db0:	f7ff fcf0 	bl	8000794 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e260      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000dc2:	4b70      	ldr	r3, [pc, #448]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d0f0      	beq.n	8000db0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000dce:	4b6d      	ldr	r3, [pc, #436]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	061b      	lsls	r3, r3, #24
 8000ddc:	4969      	ldr	r1, [pc, #420]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60cb      	str	r3, [r1, #12]
 8000de2:	e018      	b.n	8000e16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000de4:	4b67      	ldr	r3, [pc, #412]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a66      	ldr	r2, [pc, #408]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df0:	f7ff fcd0 	bl	8000794 <HAL_GetTick>
 8000df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000df8:	f7ff fccc 	bl	8000794 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e23c      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d1f0      	bne.n	8000df8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d036      	beq.n	8000e90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d019      	beq.n	8000e5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2a:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e2e:	4a55      	ldr	r2, [pc, #340]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e36:	f7ff fcad 	bl	8000794 <HAL_GetTick>
 8000e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e3c:	e008      	b.n	8000e50 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3e:	f7ff fca9 	bl	8000794 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d901      	bls.n	8000e50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e219      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e50:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x35e>
 8000e5c:	e018      	b.n	8000e90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5e:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e62:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fc93 	bl	8000794 <HAL_GetTick>
 8000e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e72:	f7ff fc8f 	bl	8000794 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e1ff      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e84:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f0      	bne.n	8000e72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d036      	beq.n	8000f0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d019      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000ea4:	4b37      	ldr	r3, [pc, #220]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a36      	ldr	r2, [pc, #216]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc70 	bl	8000794 <HAL_GetTick>
 8000eb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eb8:	f7ff fc6c 	bl	8000794 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e1dc      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x3d8>
 8000ed6:	e018      	b.n	8000f0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fc56 	bl	8000794 <HAL_GetTick>
 8000ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000eec:	f7ff fc52 	bl	8000794 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e1c2      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1f0      	bne.n	8000eec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8086 	beq.w	8001024 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_RCC_OscConfig+0x4a8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <HAL_RCC_OscConfig+0x4a8>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000f24:	f7ff fc36 	bl	8000794 <HAL_GetTick>
 8000f28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2c:	f7ff fc32 	bl	8000794 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e1a2      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_RCC_OscConfig+0x4a8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d106      	bne.n	8000f60 <HAL_RCC_OscConfig+0x480>
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f5e:	e032      	b.n	8000fc6 <HAL_RCC_OscConfig+0x4e6>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d111      	bne.n	8000f8c <HAL_RCC_OscConfig+0x4ac>
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6c:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000f6e:	f023 0301 	bic.w	r3, r3, #1
 8000f72:	6713      	str	r3, [r2, #112]	; 0x70
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	4a02      	ldr	r2, [pc, #8]	; (8000f84 <HAL_RCC_OscConfig+0x4a4>)
 8000f7a:	f023 0304 	bic.w	r3, r3, #4
 8000f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f80:	e021      	b.n	8000fc6 <HAL_RCC_OscConfig+0x4e6>
 8000f82:	bf00      	nop
 8000f84:	58024400 	.word	0x58024400
 8000f88:	58024800 	.word	0x58024800
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	d10c      	bne.n	8000fae <HAL_RCC_OscConfig+0x4ce>
 8000f94:	4b83      	ldr	r3, [pc, #524]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f98:	4a82      	ldr	r2, [pc, #520]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000f9a:	f043 0304 	orr.w	r3, r3, #4
 8000f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa0:	4b80      	ldr	r3, [pc, #512]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	4a7f      	ldr	r2, [pc, #508]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6713      	str	r3, [r2, #112]	; 0x70
 8000fac:	e00b      	b.n	8000fc6 <HAL_RCC_OscConfig+0x4e6>
 8000fae:	4b7d      	ldr	r3, [pc, #500]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb2:	4a7c      	ldr	r2, [pc, #496]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8000fba:	4b7a      	ldr	r3, [pc, #488]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fbe:	4a79      	ldr	r2, [pc, #484]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d015      	beq.n	8000ffa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fce:	f7ff fbe1 	bl	8000794 <HAL_GetTick>
 8000fd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fbdd 	bl	8000794 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e14b      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fec:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8000fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0ee      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x4f6>
 8000ff8:	e014      	b.n	8001024 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fbcb 	bl	8000794 <HAL_GetTick>
 8000ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001000:	e00a      	b.n	8001018 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff fbc7 	bl	8000794 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001010:	4293      	cmp	r3, r2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e135      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001018:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800101a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1ee      	bne.n	8001002 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 812a 	beq.w	8001282 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800102e:	4b5d      	ldr	r3, [pc, #372]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001036:	2b18      	cmp	r3, #24
 8001038:	f000 80ba 	beq.w	80011b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	2b02      	cmp	r3, #2
 8001042:	f040 8095 	bne.w	8001170 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001046:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a56      	ldr	r2, [pc, #344]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800104c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001052:	f7ff fb9f 	bl	8000794 <HAL_GetTick>
 8001056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105a:	f7ff fb9b 	bl	8000794 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e10b      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800106c:	4b4d      	ldr	r3, [pc, #308]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001078:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800107a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_RCC_OscConfig+0x6c8>)
 800107e:	4013      	ands	r3, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	430a      	orrs	r2, r1
 800108c:	4945      	ldr	r1, [pc, #276]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800108e:	4313      	orrs	r3, r2
 8001090:	628b      	str	r3, [r1, #40]	; 0x28
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	3b01      	subs	r3, #1
 8001098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	3b01      	subs	r3, #1
 80010a2:	025b      	lsls	r3, r3, #9
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	431a      	orrs	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ac:	3b01      	subs	r3, #1
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ba:	3b01      	subs	r3, #1
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80010c2:	4938      	ldr	r1, [pc, #224]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010c4:	4313      	orrs	r3, r2
 80010c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	4a35      	ldr	r2, [pc, #212]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d8:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x6cc>)
 80010da:	4013      	ands	r3, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	4930      	ldr	r1, [pc, #192]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	f023 020c 	bic.w	r2, r3, #12
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	492b      	ldr	r1, [pc, #172]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	f023 0202 	bic.w	r2, r3, #2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4927      	ldr	r1, [pc, #156]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001108:	4313      	orrs	r3, r2
 800110a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800110e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	4a21      	ldr	r2, [pc, #132]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800111e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001128:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800112a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001130:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a18      	ldr	r2, [pc, #96]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fb24 	bl	8000794 <HAL_GetTick>
 800114c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001150:	f7ff fb20 	bl	8000794 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e090      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x670>
 800116e:	e088      	b.n	8001282 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800117a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800117c:	f7ff fb0a 	bl	8000794 <HAL_GetTick>
 8001180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001184:	f7ff fb06 	bl	8000794 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e076      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001196:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <HAL_RCC_OscConfig+0x6c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d1f0      	bne.n	8001184 <HAL_RCC_OscConfig+0x6a4>
 80011a2:	e06e      	b.n	8001282 <HAL_RCC_OscConfig+0x7a2>
 80011a4:	58024400 	.word	0x58024400
 80011a8:	fffffc0c 	.word	0xfffffc0c
 80011ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d031      	beq.n	8001228 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f003 0203 	and.w	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d12a      	bne.n	8001228 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	429a      	cmp	r2, r3
 80011e0:	d122      	bne.n	8001228 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d11a      	bne.n	8001228 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	0a5b      	lsrs	r3, r3, #9
 80011f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001200:	429a      	cmp	r2, r3
 8001202:	d111      	bne.n	8001228 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	0c1b      	lsrs	r3, r3, #16
 8001208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001210:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001212:	429a      	cmp	r2, r3
 8001214:	d108      	bne.n	8001228 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	0e1b      	lsrs	r3, r3, #24
 800121a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001222:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e02b      	b.n	8001284 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001236:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	429a      	cmp	r2, r3
 8001240:	d01f      	beq.n	8001282 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 8001244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800124e:	f7ff faa1 	bl	8000794 <HAL_GetTick>
 8001252:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001254:	bf00      	nop
 8001256:	f7ff fa9d 	bl	8000794 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	4293      	cmp	r3, r2
 8001260:	d0f9      	beq.n	8001256 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 8001264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_RCC_OscConfig+0x7b0>)
 8001268:	4013      	ands	r3, r2
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800126e:	00d2      	lsls	r2, r2, #3
 8001270:	4906      	ldr	r1, [pc, #24]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 8001272:	4313      	orrs	r3, r2
 8001274:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_RCC_OscConfig+0x7ac>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3730      	adds	r7, #48	; 0x30
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58024400 	.word	0x58024400
 8001290:	ffff0007 	.word	0xffff0007

08001294 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e19c      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012a8:	4b8a      	ldr	r3, [pc, #552]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d910      	bls.n	80012d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b6:	4b87      	ldr	r3, [pc, #540]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 020f 	bic.w	r2, r3, #15
 80012be:	4985      	ldr	r1, [pc, #532]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	4b83      	ldr	r3, [pc, #524]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e184      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d010      	beq.n	8001306 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d908      	bls.n	8001306 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80012f4:	4b78      	ldr	r3, [pc, #480]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	4975      	ldr	r1, [pc, #468]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001302:	4313      	orrs	r3, r2
 8001304:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d010      	beq.n	8001334 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695a      	ldr	r2, [r3, #20]
 8001316:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800131e:	429a      	cmp	r2, r3
 8001320:	d908      	bls.n	8001334 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001322:	4b6d      	ldr	r3, [pc, #436]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	496a      	ldr	r1, [pc, #424]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001330:	4313      	orrs	r3, r2
 8001332:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	2b00      	cmp	r3, #0
 800133e:	d010      	beq.n	8001362 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	4b64      	ldr	r3, [pc, #400]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800134c:	429a      	cmp	r2, r3
 800134e:	d908      	bls.n	8001362 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	495e      	ldr	r1, [pc, #376]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 800135e:	4313      	orrs	r3, r2
 8001360:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0320 	and.w	r3, r3, #32
 800136a:	2b00      	cmp	r3, #0
 800136c:	d010      	beq.n	8001390 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69da      	ldr	r2, [r3, #28]
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800137a:	429a      	cmp	r2, r3
 800137c:	d908      	bls.n	8001390 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800137e:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4953      	ldr	r1, [pc, #332]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 800138c:	4313      	orrs	r3, r2
 800138e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d010      	beq.n	80013be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d908      	bls.n	80013be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f023 020f 	bic.w	r2, r3, #15
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4947      	ldr	r1, [pc, #284]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d055      	beq.n	8001476 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4940      	ldr	r1, [pc, #256]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013e4:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d121      	bne.n	8001434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0f6      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d107      	bne.n	800140c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d115      	bne.n	8001434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0ea      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d107      	bne.n	8001424 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0de      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0d6      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	f023 0207 	bic.w	r2, r3, #7
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4925      	ldr	r1, [pc, #148]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001442:	4313      	orrs	r3, r2
 8001444:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001446:	f7ff f9a5 	bl	8000794 <HAL_GetTick>
 800144a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144c:	e00a      	b.n	8001464 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144e:	f7ff f9a1 	bl	8000794 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	f241 3288 	movw	r2, #5000	; 0x1388
 800145c:	4293      	cmp	r3, r2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e0be      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	429a      	cmp	r2, r3
 8001474:	d1eb      	bne.n	800144e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d010      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	429a      	cmp	r2, r3
 8001490:	d208      	bcs.n	80014a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f023 020f 	bic.w	r2, r3, #15
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <HAL_RCC_ClockConfig+0x244>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d214      	bcs.n	80014dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 020f 	bic.w	r2, r3, #15
 80014ba:	4906      	ldr	r1, [pc, #24]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_RCC_ClockConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e086      	b.n	80015e2 <HAL_RCC_ClockConfig+0x34e>
 80014d4:	52002000 	.word	0x52002000
 80014d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d010      	beq.n	800150a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d208      	bcs.n	800150a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	4939      	ldr	r1, [pc, #228]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001506:	4313      	orrs	r3, r2
 8001508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d010      	beq.n	8001538 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695a      	ldr	r2, [r3, #20]
 800151a:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001522:	429a      	cmp	r2, r3
 8001524:	d208      	bcs.n	8001538 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001526:	4b31      	ldr	r3, [pc, #196]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	492e      	ldr	r1, [pc, #184]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001534:	4313      	orrs	r3, r2
 8001536:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	2b00      	cmp	r3, #0
 8001542:	d010      	beq.n	8001566 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	699a      	ldr	r2, [r3, #24]
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001550:	429a      	cmp	r2, r3
 8001552:	d208      	bcs.n	8001566 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4922      	ldr	r1, [pc, #136]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001562:	4313      	orrs	r3, r2
 8001564:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0320 	and.w	r3, r3, #32
 800156e:	2b00      	cmp	r3, #0
 8001570:	d010      	beq.n	8001594 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800157e:	429a      	cmp	r2, r3
 8001580:	d208      	bcs.n	8001594 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4917      	ldr	r1, [pc, #92]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 8001590:	4313      	orrs	r3, r2
 8001592:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001594:	f000 f834 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 8001598:	4602      	mov	r2, r0
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	0a1b      	lsrs	r3, r3, #8
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	4912      	ldr	r1, [pc, #72]	; (80015f0 <HAL_RCC_ClockConfig+0x35c>)
 80015a6:	5ccb      	ldrb	r3, [r1, r3]
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	fa22 f303 	lsr.w	r3, r2, r3
 80015b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_RCC_ClockConfig+0x358>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <HAL_RCC_ClockConfig+0x35c>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_RCC_ClockConfig+0x360>)
 80015ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_RCC_ClockConfig+0x364>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_RCC_ClockConfig+0x368>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f892 	bl	8000700 <HAL_InitTick>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	58024400 	.word	0x58024400
 80015f0:	08001980 	.word	0x08001980
 80015f4:	24000004 	.word	0x24000004
 80015f8:	24000000 	.word	0x24000000
 80015fc:	24000008 	.word	0x24000008

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001606:	4bb3      	ldr	r3, [pc, #716]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800160e:	2b18      	cmp	r3, #24
 8001610:	f200 8155 	bhi.w	80018be <HAL_RCC_GetSysClockFreq+0x2be>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	08001681 	.word	0x08001681
 8001620:	080018bf 	.word	0x080018bf
 8001624:	080018bf 	.word	0x080018bf
 8001628:	080018bf 	.word	0x080018bf
 800162c:	080018bf 	.word	0x080018bf
 8001630:	080018bf 	.word	0x080018bf
 8001634:	080018bf 	.word	0x080018bf
 8001638:	080018bf 	.word	0x080018bf
 800163c:	080016a7 	.word	0x080016a7
 8001640:	080018bf 	.word	0x080018bf
 8001644:	080018bf 	.word	0x080018bf
 8001648:	080018bf 	.word	0x080018bf
 800164c:	080018bf 	.word	0x080018bf
 8001650:	080018bf 	.word	0x080018bf
 8001654:	080018bf 	.word	0x080018bf
 8001658:	080018bf 	.word	0x080018bf
 800165c:	080016ad 	.word	0x080016ad
 8001660:	080018bf 	.word	0x080018bf
 8001664:	080018bf 	.word	0x080018bf
 8001668:	080018bf 	.word	0x080018bf
 800166c:	080018bf 	.word	0x080018bf
 8001670:	080018bf 	.word	0x080018bf
 8001674:	080018bf 	.word	0x080018bf
 8001678:	080018bf 	.word	0x080018bf
 800167c:	080016b3 	.word	0x080016b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001680:	4b94      	ldr	r3, [pc, #592]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0320 	and.w	r3, r3, #32
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800168c:	4b91      	ldr	r3, [pc, #580]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	4a90      	ldr	r2, [pc, #576]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001698:	fa22 f303 	lsr.w	r3, r2, r3
 800169c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800169e:	e111      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80016a0:	4b8d      	ldr	r3, [pc, #564]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80016a2:	61bb      	str	r3, [r7, #24]
      break;
 80016a4:	e10e      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80016a6:	4b8d      	ldr	r3, [pc, #564]	; (80018dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80016a8:	61bb      	str	r3, [r7, #24]
      break;
 80016aa:	e10b      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80016ac:	4b8c      	ldr	r3, [pc, #560]	; (80018e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80016ae:	61bb      	str	r3, [r7, #24]
      break;
 80016b0:	e108      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80016b2:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80016bc:	4b85      	ldr	r3, [pc, #532]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80016c8:	4b82      	ldr	r3, [pc, #520]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80016d2:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	08db      	lsrs	r3, r3, #3
 80016d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80e1 	beq.w	80018b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	f000 8083 	beq.w	8001804 <HAL_RCC_GetSysClockFreq+0x204>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b02      	cmp	r3, #2
 8001702:	f200 80a1 	bhi.w	8001848 <HAL_RCC_GetSysClockFreq+0x248>
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_RCC_GetSysClockFreq+0x114>
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d056      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001712:	e099      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001714:	4b6f      	ldr	r3, [pc, #444]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	2b00      	cmp	r3, #0
 800171e:	d02d      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001720:	4b6c      	ldr	r3, [pc, #432]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	08db      	lsrs	r3, r3, #3
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	4a6b      	ldr	r2, [pc, #428]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800172c:	fa22 f303 	lsr.w	r3, r2, r3
 8001730:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800174a:	4b62      	ldr	r3, [pc, #392]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800175a:	ed97 6a02 	vldr	s12, [r7, #8]
 800175e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80018e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800176a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800176e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001776:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800177a:	e087      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001786:	eddf 6a58 	vldr	s13, [pc, #352]	; 80018e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800178a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800178e:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800179e:	ed97 6a02 	vldr	s12, [r7, #8]
 80017a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80018e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80017a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80017be:	e065      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80018ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80017ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017d2:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80017e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80018e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80017ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001802:	e043      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800180e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80018f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001816:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001826:	ed97 6a02 	vldr	s12, [r7, #8]
 800182a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80018e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800182e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800183a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800183e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001842:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001846:	e021      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001852:	eddf 6a26 	vldr	s13, [pc, #152]	; 80018ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8001856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800186a:	ed97 6a02 	vldr	s12, [r7, #8]
 800186e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80018e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800187a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800187e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800188a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	0a5b      	lsrs	r3, r3, #9
 8001892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001896:	3301      	adds	r3, #1
 8001898:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80018a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b0:	ee17 3a90 	vmov	r3, s15
 80018b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80018b6:	e005      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
      break;
 80018bc:	e002      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80018be:	4b07      	ldr	r3, [pc, #28]	; (80018dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80018c0:	61bb      	str	r3, [r7, #24]
      break;
 80018c2:	bf00      	nop
  }

  return sysclockfreq;
 80018c4:	69bb      	ldr	r3, [r7, #24]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	58024400 	.word	0x58024400
 80018d8:	03d09000 	.word	0x03d09000
 80018dc:	003d0900 	.word	0x003d0900
 80018e0:	017d7840 	.word	0x017d7840
 80018e4:	46000000 	.word	0x46000000
 80018e8:	4c742400 	.word	0x4c742400
 80018ec:	4a742400 	.word	0x4a742400
 80018f0:	4bbebc20 	.word	0x4bbebc20

080018f4 <mainInit>:

extern "C" void mainInit();
extern "C" void mainProcces();


void mainInit()  {
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <mainProcces>:

void mainProcces() {
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <memset>:
 8001910:	4402      	add	r2, r0
 8001912:	4603      	mov	r3, r0
 8001914:	4293      	cmp	r3, r2
 8001916:	d100      	bne.n	800191a <memset+0xa>
 8001918:	4770      	bx	lr
 800191a:	f803 1b01 	strb.w	r1, [r3], #1
 800191e:	e7f9      	b.n	8001914 <memset+0x4>

08001920 <__libc_init_array>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	4d0d      	ldr	r5, [pc, #52]	; (8001958 <__libc_init_array+0x38>)
 8001924:	4c0d      	ldr	r4, [pc, #52]	; (800195c <__libc_init_array+0x3c>)
 8001926:	1b64      	subs	r4, r4, r5
 8001928:	10a4      	asrs	r4, r4, #2
 800192a:	2600      	movs	r6, #0
 800192c:	42a6      	cmp	r6, r4
 800192e:	d109      	bne.n	8001944 <__libc_init_array+0x24>
 8001930:	4d0b      	ldr	r5, [pc, #44]	; (8001960 <__libc_init_array+0x40>)
 8001932:	4c0c      	ldr	r4, [pc, #48]	; (8001964 <__libc_init_array+0x44>)
 8001934:	f000 f818 	bl	8001968 <_init>
 8001938:	1b64      	subs	r4, r4, r5
 800193a:	10a4      	asrs	r4, r4, #2
 800193c:	2600      	movs	r6, #0
 800193e:	42a6      	cmp	r6, r4
 8001940:	d105      	bne.n	800194e <__libc_init_array+0x2e>
 8001942:	bd70      	pop	{r4, r5, r6, pc}
 8001944:	f855 3b04 	ldr.w	r3, [r5], #4
 8001948:	4798      	blx	r3
 800194a:	3601      	adds	r6, #1
 800194c:	e7ee      	b.n	800192c <__libc_init_array+0xc>
 800194e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001952:	4798      	blx	r3
 8001954:	3601      	adds	r6, #1
 8001956:	e7f2      	b.n	800193e <__libc_init_array+0x1e>
 8001958:	08001990 	.word	0x08001990
 800195c:	08001990 	.word	0x08001990
 8001960:	08001990 	.word	0x08001990
 8001964:	08001994 	.word	0x08001994

08001968 <_init>:
 8001968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196a:	bf00      	nop
 800196c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800196e:	bc08      	pop	{r3}
 8001970:	469e      	mov	lr, r3
 8001972:	4770      	bx	lr

08001974 <_fini>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	bf00      	nop
 8001978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800197a:	bc08      	pop	{r3}
 800197c:	469e      	mov	lr, r3
 800197e:	4770      	bx	lr
